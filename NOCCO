```{r}
rm(list=ls())
library(matrixcalc)
```


```{r}
gaussian_kernel_matrix <- function(X, sigma = 1) {
  n <- length(X)
  kernel_matrix <- matrix(0, nrow = n, ncol = n)
  
  for (i in 1:n) {
    for (j in i:n) {
      dist_sq <- (X[i] - X[j])^2  
      kernel_value <- exp(-dist_sq / (2 * sigma^2))  
      
      kernel_matrix[i, j] <- kernel_value
      kernel_matrix[j, i] <- kernel_value 
    }
  }
  
  return(kernel_matrix)
}

compute_K_bar <- function(K) {
  n <- nrow(K)
  H <- diag(n) - matrix(1, n, n) / n  
  K_bar = H %*% K %*% H
  return(K_bar)  
}

compute_tilde_K <- function(K_bar, epsilon) {
  n <- nrow(K_bar)
  I_n <- diag(n)
  regularized_matrix <- K_bar + epsilon * n * I_n
  inv_regularized_matrix <- solve(regularized_matrix)
  tilde_K <- K_bar %*% inv_regularized_matrix
  return(tilde_K)
}

compute_NOCCO <- function(K_1,K_2){
  return(sum(diag(K_1 %*% K_2)))
}

compute_U_and_C <- function(Y,X,epsilon,sigma){
  L <- gaussian_kernel_matrix(Y,sigma)
  L_bar <- compute_K_bar(L)
  L_tilde <- compute_tilde_K(L_bar,epsilon)
  d <- ncol(X)
  C <- numeric(d)
  n <- nrow(X)
  U <- matrix(0,nrow=n**2, ncol=d)
  for(d_index in 1:d){
    X_var <- X[,d_index]
    K <- gaussian_kernel_matrix(X_var,sigma)
    K_bar <- compute_K_bar(K)
    K_tilde <- compute_tilde_K(K_bar,epsilon)
    U[,d_index] <- vec(K_tilde)
    C[d_index] <- compute_NOCCO(K_tilde,L_tilde)
  }
  out <- list(U=U,C=C)
  return(out)
}

NOCCO_Lasso <- function(Y, X, epsilon, sigma){
  res <- compute_U_and_C(Y,X,epsilon,sigma)
  U <- res$U
  C <- res$C
  Y_lasso <- t(ginv(U))%*%C
  cv_fit <- cv.glmnet(U, Y_lasso, alpha = 1, lower.limits = 0)
  best_lambda <- cv_fit$lambda.min
  coefficients <- as.numeric(coef(cv_fit, s = "lambda.min"))[-1]
  return(coefficients)
}
```



```{r}
library(glmnet)

n <- 250  
p <- 50   

data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*(sin(data$X_1)) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)


resultats <- NOCCO_Lasso(Y, X, epsilon = 1e-6, sigma = 1)
resultats
```
