SST <- SSE + SSR
sqrt(SSE/(length(y)-p))
m <- 3
p <- m+1
plan_complet <- FrF2(nruns = 2**m,
nfactors = m,
randomize = FALSE,
factor.names = list(x1=c(-1,1), x2=c(-1,1), x3=c(-1,1)))
y <- c(53,30,18,65,44,24,18,58)
n <- length(y)
data <- add.response(plan_complet,y)
regression0 <- lm(y~x1+x2+x3, data=plan_complet)
summary(regression0)
regression <- lm(y~x1+x2+x3 + x1*x2, data=plan_complet)
summary(regression)
anov <- anova(regression)
SSE <- anov$`Sum Sq`[5]
SSR <- sum(anov$`Sum Sq`[1:4])
SST <- SSR + SSE
sqrt(SSE/(length(y)-p))
# Exemple 7 : Fraction régulière avec interractions
rm(list=ls())
m <- 4 # facteurs
p <- 1 + 4 + 6 # constantes + facteurs + interractions entres facteurs
n <- 2**m + 3 # au centres
n_e <- 2**m + 1
plan_code <- FrF2(nruns = 2**m,
nfactors = m,
randomize = FALSE,
ncenter = 3,
factor.names =list(duree=c(-1,1),
temperature=c(-1,1),
pression=c(-1,1),
concentration=c(-1,1)))
y <- c(12.4,7.2,16.5,11.2,14.1,28.9,17.1,28.8,23.8,18.9,16.4,12.1,24.0,39.4,18.5,30.2,24.8,21.2,19.4)
plan_complet_y <- add.response(plan_code,y)
regression <- lm(y~(.)^2,plan_complet_y)
summary(regression)
anov <- anova(regression)
SSE <- anov$`Sum Sq`[11]
SSR <- sum(anov$`Sum Sq`[1:11])
SST <- SSE + SSR
sqrt(SSE/(length(y)-p))
anov
anov <- anova(regression)
SSE <- anov$`Sum Sq`[11]
SSR <- sum(anov$`Sum Sq`[1:10])
SST <- SSE + SSR
sqrt(SSE/(length(y)-p))
anov <- anova(regression)
SSE <- anov$`Sum Sq`[5]
SSR <- sum(anov$`Sum Sq`[1:4])
SST <- SSR + SSE
sqrt(SSE/(length(y)-p))
rm(list=ls())
library(FrF2)
m <- 3
p <- m+1
plan_complet <- FrF2(nruns = 2**m,
nfactors = m,
randomize = FALSE,
factor.names = list(x1=c(-1,1), x2=c(-1,1), x3=c(-1,1)))
y <- c(53,30,18,65,44,24,18,58)
n <- length(y)
n
data <- add.response(plan_complet,y)
regression0 <- lm(y~x1+x2+x3, data=plan_complet)
summary(regression0)
regression <- lm(y~x1+x2+x3 + x1*x2, data=plan_complet)
summary(regression)
anov <- anova(regression)
SSE <- anov$`Sum Sq`[5]
anov
SSE <- anov$`Sum Sq`[5]
SSR <- sum(anov$`Sum Sq`[1:4])
SST <- SSR + SSE
sqrt(SSE/(length(y)-p))
sqrt(SSE/(length(y)-p))
anov$`Sum Sq`[1:4]
SSE <- anov$`Sum Sq`[5]
SSE
# Exemple 6 : Plan complet avec interractions
rm(list=ls())
m <- 2
p <- m + 1 + 1 # effet d'intéractions
n <- 2**m + 3
n_e <- 2**m + 1
plan_code <- FrF2(nruns = 2**m,
nfactors = m,
randomize = FALSE,
factor.names = list(temp=c(-1,1),concentration=c(-1,1)),
ncenter = 3)
y <- c(48,68,77,76,64,66,65)
plan_complet_y <- add.response(plan_code,y)
regression <- lm(y~temp+concentration + temp*concentration,plan_complet_y)
summary(regression)
anov <- anova(regression)
SSE <- anov$`Sum Sq`[4]
anov
SSE
SSR <- sum(anov$`Sum Sq`[1:3])
SST <- SSE + SSR
sqrt(SSE/(length(n)-p))
SSE
SSR <- sum(anov$`Sum Sq`[1:3])
sqrt(SSE/(length(y)-p))
m <- 3
p <- m+1
plan_complet <- FrF2(nruns = 2**m,
nfactors = m,
randomize = FALSE,
factor.names = list(x1=c(-1,1), x2=c(-1,1), x3=c(-1,1)))
y <- c(53,30,18,65,44,24,18,58)
n <- length(y)
data <- add.response(plan_complet,y)
regression0 <- lm(y~x1+x2+x3, data=plan_complet)
summary(regression0)
regression <- lm(y~x1+x2+x3 + x1*x2, data=plan_complet)
summary(regression)
anov <- anova(regression)
SSE <- anov$`Sum Sq`[5]
SSR <- sum(anov$`Sum Sq`[1:4])
SST <- SSR + SSE
regression <- lm(y~x1+x2+x3 + x1*x2, data=plan_complet)
summary(regression)
# meilleur regression avec terme d'interaction
p_tilde <- p + 1
anov <- anova(regression)
SSE <- anov$`Sum Sq`[5]
SSR <- sum(anov$`Sum Sq`[1:4])
SST <- SSR + SSE
sqrt(SSE/(8-(p+1))) # attention à compter la variable d'intéraction dans le modèle
anov <- anova(regression0)
anov0 <- anova(regression0)
SSE <- anov0$`Sum Sq`[5]
SSR <- sum(anov0$`Sum Sq`[1:4])
SST <- SSR + SSE
sqrt(SSE/(n-p))
sqrt(SSE/(n-p))
summary(regression0)
SSE
SSE <- anov0$`Sum Sq`[5]
anov0
SSE <- anov0$`Sum Sq`[4]
SSE
SSR <- sum(anov0$`Sum Sq`[1:3])
SST <- SSR + SSE
sqrt(SSE/(n-p))
rm(list=ls())
curve((x**(a-1))*x**(b-1))
a <- 1
b <- 1
curve((x**(a-1))*x**(b-1))
b <- 2
a <- 2
b <- 2
curve((x**(a-1))*x**(b-1))
a <- 4
b <- 2
curve((x**(a-1))*x**(b-1))
a <- 2
b <- 5
curve((x**(a-1))*x**(b-1))
a <- 2
b <- 5
curve((x**(a-1))*x**(b-1))
curve((x**(a-1))*x**(b-1),xlim = c(-1,1))
curve((x**(a-1))*x**(b-1),xlim = c(-1,1), ylim=c(-1,1))
curve((x**(a-1))*x**(b-1),xlim = c(-1,1))
curve((x**(a-1))*x**(b-1)
curve((x**(a-1))*x**(b-1))
curve((x**(a-1))*x**(b-1))
rgamma(100, a,b)
hist(rgamma(100, a,b))
hist(rgamma(100,a,b),breaks = 100)
hist(rgamma(100,a,b),breaks = 10)
hist(rgamma(100,a,b),breaks = 50)
hist(rgamma(1000,a,b),breaks = 50)
curve((x**(a-1))*x**(b-1))
hist(rgamma(1000,a,b),breaks = 50)
hist(rgamma(1000,a,b),breaks = 50,freq = TRUE)
hist(rgamma(1000,a,b),breaks = 50,freq = FALSE)
n <- 1000
hist(rgamma(n,a,b),breaks = 50,freq = FALSE)
# Paramètres pour la loi a priori Beta(alpha, beta)
alpha <- 2  # Paramètre alpha de la Beta a priori
beta <- 2   # Paramètre beta de la Beta a priori
# Simulation des données : n essais et x succès
n <- 10  # Nombre d'essais
p_true <- 0.6  # Probabilité réelle de succès
set.seed(42)  # Pour la reproductibilité
x <- rbinom(1, n, p_true)  # Nombre de succès observés
# Afficher les données observées
cat("Nombre de succès observés :", x, "\n")
# Loi a posteriori Beta(alpha + x, beta + n - x)
alpha_post <- alpha + x
beta_post <- beta + n - x
# Simulation de la distribution a priori et a posteriori
n_sim <- 1000  # Nombre de simulations
p_prior <- rbeta(n_sim, alpha, beta)  # A priori
p_posterior <- rbeta(n_sim, alpha_post, beta_post)  # A posteriori
# Tracé des distributions a priori et a posteriori
hist(p_prior, probability = TRUE, col = rgb(1, 0, 0, 0.5),
main = "Loi a priori et a posteriori de p", xlab = "p", ylim = c(0, 5))
hist(p_posterior, probability = TRUE, col = rgb(0, 0, 1, 0.5), add = TRUE)
# Légende
legend("topright", legend = c("A priori", "A posteriori"),
fill = c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
hist(p_posterior, probability = TRUE, col = rgb(0, 0, 1, 0.5), add = TRUE, breaks = 50)
# Tracé des distributions a priori et a posteriori
hist(p_prior, probability = TRUE, col = rgb(1, 0, 0, 0.5),
main = "Loi a priori et a posteriori de p", xlab = "p", ylim = c(0, 5),breaks = 50)
hist(p_posterior, probability = TRUE, col = rgb(0, 0, 1, 0.5), add = TRUE, breaks = 50)
# Légende
legend("topright", legend = c("A priori", "A posteriori"),
fill = c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
rm(list=ls())
rm(list=ls())
b <- 5
a <- 2
b <- 5
y0 <- 8
n0 <- 5000
n_sim <- 10000
lambda <- rgamma(n_sim,a,b)
lambda
vraissmblance <- rpois(n_sim,lambda*n0)
a <- 1
b <- 1000
y0 <- 8
n0 <- 5000
n_sim <- 10000
lambda <- rgamma(n_sim,a,b)
vraissmblance <- rpois(n_sim,lambda*n0)
data <- data.frame(
Number_of_cells_analyzed = c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59),
Dose_Gray = c(0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.50, 2.00, 3.00, 4.00, 5.00),
Total_number_of_dicentrics = c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)
)
print(data)
data <- data.frame(
Nb_cells_ni = c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59),
Dose_Gray = c(0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.50, 2.00, 3.00, 4.00, 5.00),
Total_number_of_dicentrics = c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)
)
data <- data.frame(
Nb_cells_ni = c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59),
Dose_Gray = c(0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.50, 2.00, 3.00, 4.00, 5.00),
Total_number_of_dicentrics = c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)
)
data <- data.frame(
Nb_cells_ni = c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59),
Dose_Gray = c(0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.50, 2.00, 3.00, 4.00, 5.00),
Total_nb_dicentrics = c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)
)
print(data)
data <- data.frame(
Nb_cells_ni = c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59),
Dose_Gray_Di = c(0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.50, 2.00, 3.00, 4.00, 5.00),
Total_nb_dicentrics_yi = c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)
)
data <- data.frame(
Nb_cells_ni = c(5000, 5002, 2008, 2002, 1832, 1168, 562, 332, 193, 103, 59),
Dose_Gray_Di = c(0, 0.10, 0.25, 0.50, 0.75, 1.00, 1.50, 2.00, 3.00, 4.00, 5.00),
Total_nb_dicentrics_yi = c(8, 14, 22, 55, 100, 109, 100, 103, 108, 103, 107)
)
print(data)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
plot(hist(rnorm(10000, 0, 10000)))
library(rjags)
library(ggmcmc)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(coda)
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(rjags)
library(rjags)
install.packages("rjags")
install.packages("rjags")
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rjags)
library(rmarkdown)
library(rjags)
library(rjags)
rm(list=ls())
d <- 10
n <- 100
sigma2 <- 1
theta_truth <- c(10,1,5,2,8,rep(0,5))
x <- matrix(c(a,b))
x <- matrix(c(1,2,3,4))
x <- matrix(c(1,2,3,4))
x
x <- matrix(c(1,2,3,4),nrow = 2)
x
dim(x)
x <- matrix(c(1,2,3,4,5,6),nrow = 2)
x
dim(x)
x <- matrix(c(),nrow = 100, ncol=10)
x <- matrix(rnorm(100*10,0,1),nrow = 100, ncol=10)
x
x <- matrix(rnorm(1000*10,0,1),nrow = 100, ncol=10)
x <- matrix(rnorm(1000*10,0,1),nrow = 1000, ncol=10)
dim(x)
gen_y <- function(X, theta, sigma2){
n <- nrow(X)
epsilon <- rnorm(n,0,sigma2)
y <- X%*%theta + epsilon
return(y)
}
y
gen_y()
theta_truth <- c(10,1,5,2,8,rep(0,5))
x <- matrix(rnorm(1000*10,0,1),nrow = 1000, ncol=10)
dim(x)
gen_y <- function(X, theta, sigma2){
n <- nrow(X)
epsilon <- rnorm(n,0,sigma2)
y <- X%*%theta + epsilon
return(y)
}
gen_y(X,theta,sigma2)
gen_y(x,theta_truth,sigma2)
library(glmnet)
library(glmnet)
d <- 10
n <- 100
sigma2 <- 1
theta_truth <- c(10,1,5,2,8,rep(0,5))
x <- matrix(rnorm(1000*10,0,1),nrow = 1000, ncol=10)
dim(x)
gen_y <- function(X, theta, sigma2){
n <- nrow(X)
epsilon <- rnorm(n,0,sigma2)
y <- X%*%theta + epsilon
return(y)
}
gen_y(x,theta_truth,sigma2)
lambda_grid <- 10^seq(-2, 4, length.out = 50)
lambda_grid
for(lambda in lambda_grid){
print(lambda)
}
ridge_model <- glmnet(x, y, alpha = lambda)
ridge_model <- glmnet(x, y, alpha = lambda_grid[0])
lambda_grid[0]
lambda_grid
lambda_grid[1]
ridge_model <- glmnet(x, y, alpha = lambda_grid[1])
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(x, y, alpha = lambda_grid[1])
ridge_model
summary(ridge_model)
cv.glmnet(x,y)
cv <- cv.glmnet(x,y)
cv
lambda_grid
coef(ridge_model)
ridge_model <- glmnet(x, y, alpha = lambda_grid[1])
summary(ridge_model)
coef(ridge_model)
biai <- numeric(100)
biai
biai <- numeric(50)
for(lambda in lambda_grid){
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(X, y, alpha = lambda)
biai[i] <- (theta_truth - coef(ridge_model))**2
}
biai <- numeric(50)
for(lambda in lambda_grid){
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(x, y, alpha = lambda)
biai[i] <- (theta_truth - coef(ridge_model))**2
}
biai <- c()
for(lambda in lambda_grid){
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(x, y, alpha = lambda)
biai <- c(biai, (theta_truth - coef(ridge_model))**2)
}
ridge_model <- glmnet(x, y, alpha = lambda_grid[1])
summary(ridge_model)
coef(ridge_model)
biai
glmnet(x,y,alpha=0, lambda = 0.1)
reg <- glmnet(x,y,alpha=0, lambda = 0.1)
summary(reg)
coef(reg)
?glmnet
biai <- c()
for(lambda in lambda_grid){
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(x, y, alpha = 0, lambda = lambda)
biai <- c(biai, (theta_truth - coef(ridge_model))**2)
}
biai
biai
biai <- c()
for(lambda in lambda_grid){
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(x, y, alpha = 0, lambda = lambda)
biai <- c(biai, (theta_truth - coef(ridge_model))**2)
}
theta_truth
coef(ridge_model)
coef(reg)
coef(reg)
coef(reg)
theta_truth
coef(reg)[1:10]
coef(reg)[2:11]
biai <- c(biai, (theta_truth - coef(ridge_model)[2:11])**2)
biai <- c()
for(lambda in lambda_grid){
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(x, y, alpha = 0, lambda = lambda)
biai <- c(biai, (theta_truth - coef(ridge_model)[2:11])**2)
}
biai
biai <- c()
for(lambda in lambda_grid){
y <- gen_y(x,theta_truth,sigma2)
ridge_model <- glmnet(x, y, alpha = 0, lambda = lambda)
biai <- c(biai, sum((theta_truth - coef(ridge_model)[2:11])**2))
}
biai
c(0*100)
rep(0,100)
coefficients <- matrix(c(rep(0,10))
coefficients <- matrix(c(rep(0,10*50), nrow=50, ncol=10)
coefficients <- matrix(c(rep(0,10*50), nrow=50, ncol=10)
coefficients <- matrix(c(rep(0,10*50)), nrow=50, ncol=10)
coefficients
coefficients <- matrix(c(rep(0,10*50)), nrow=50, ncol=10)
coefficients
install.packages("languageserver")
install.packages("languageserver")
library(languageserver)
library(languageserver)
setwd("~/00_Ensai/projet-methodo/ProjetMethodo/real-word-datasets/dataset/")
library(GSelection)
library(R.matlab)
rm(list=ls())
data <- readMat("warpAR10P.mat")
str(data)
ar10p <- as.data.frame(data$X)
colnames(ar10p) <- paste0("X", 1:2400)
ar10p$y <- as.vector(data$Y)
rm(list=ls())
data <- readMat("warpPIE10P.mat")
str(data)
pie10p <- as.data.frame(data$X)
colnames(pie10p) <- paste0("X", 1:2420)
pie10p$y <- as.vector(data$Y)
rm(list=ls())
data <- readMat("pixraw10P.mat")
str(data)
pix10p <- as.data.frame(data$X)
colnames(pix10p) <- paste0("X", 1:10000)
pix10p$y <- as.vector(data$Y)
rm(list=ls())
data <- readMat("orlraws10P.mat")
str(data)
orl10p <- as.data.frame(data$X)
colnames(orl10p) <- paste0("X", 1:10304)
orl10p$y <- as.vector(data$Y)
rm(list=ls())
data <- readMat("TOX-171.mat")
str(data)
tox <- as.data.frame(data$X)
colnames(tox) <- paste0("X", 1:5748)
tox$y <- as.vector(data$Y)
rm(list=ls())
data <- readMat("CLL-SUB-111.mat")
str(data)
cll_sub <- as.data.frame(data$X)
colnames(cll_sub) <- paste0("X", 1:11340)
cll_sub$y <- as.vector(data$Y)
