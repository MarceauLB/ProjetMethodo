?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5,0,2),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5,0,2),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5,0,8),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5,0,8),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
# RED function
rm(list=ls())
X <- matrix(rnorm(10*5,0,8),10,5)
dim(X)
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1,2,3,4),4,X)
?cor
cbind(rnorm(10*5,0,8),rpois(10*5,2))
X <- matrix(rnorm(10*5,0,8),10,5)
X
X <- cbind(matrix(rnorm(10*5,0,8),10,5),matrix(rpois(10*5,8),10,5))
X
X <- X[,sample(1:length(10))]
sample(1:length(10))
X <- X[,sample(1:length(10),10)]
sample(1:length(10),10)
sample(1:10,10,replace=FALSE)
X <- cbind(matrix(rnorm(10*5,0,8),10,5),matrix(rpois(10*5,8),10,5))
X <- X[,sample(1:10,10,replace=FALSE)]
X
dim(X)
res_score(c(1:8),8,X)
# RED function
rm(list=ls())
X <- cbind(matrix(rnorm(10*5,0,8),10,5),matrix(rpois(10*5,8),10,5))
X <- X[,sample(1:10,10,replace=FALSE)]
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
print(k>l)
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1:8),8,X)
?cor
# RED function
rm(list=ls())
X <- cbind(matrix(rnorm(10*5,0,8),10,5),matrix(rpois(10*5,8),10,5))
X <- X[,sample(1:10,10,replace=FALSE)]
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1:8),8,X)
?cor
# RED function
rm(list=ls())
X <- cbind(matrix(rnorm(10*5,0,8),10,5),matrix(rpois(10*5,8),10,5))
X <- X[,sample(1:10,10,replace=FALSE)]
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1:8),8,X)
X
# RED function
rm(list=ls())
X <- cbind(matrix(rnorm(10*5,0,8),10,5),matrix(rpois(10*5,8),10,5))
X <- X[,sample(1:10,10,replace=FALSE)]
X
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
res_score(c(1:8),8,X)
X <- cbind(matrix(rnorm(10*5,0,8),10,5),matrix(rpois(10*5,8),10,5))
X
res_score(c(6:10),5,X)
# RED function
rm(list=ls())
res_score <- function(features_index, m_val, X){
features_values <- X[,features_index]
correlation_matrix <- cor(X)
red <- 0
for(l in 1:(m_val-1)){
for(k in (l+1):m_val){
red <- red + abs(correlation_matrix[k,l])
}
}
red <- red/(m_val*(m_val-1))
return(red)
}
rep <- 15
m_range <- seq(10,50,10)
m_range
m_taille <- length(m_range)
m_taille
m_range <- seq(10,50,10)
m_range
m_taille <- length(m_range)
ClassifAcc_table <- matrix(0, nrow = m_taille,ncol = rep)
RED_table <- matrix(0,nrow = m_taille,ncol=rep)
ClassifAcc_table
RED_table
rep <- 10
m_range <- seq(10,50,10)
m_taille <- length(m_range)
ClassifAcc_table <- matrix(0, nrow = m_taille,ncol = rep)
RED_table <- matrix(0,nrow = m_taille,ncol=rep)
ClassifAcc_table
RED_table <- matrix(0,nrow = 1,ncol=rep)
RED_table
# tableau figure 3 de l'article
rm(list=ls())
set.seed(123)
library(calibrateBinary)
library(GSelection)
source("../red_score.R")
ar10p <- read.csv("ar10p.csv")
dim <- dim(ar10p)
n <- dim[1]
p <- dim[2]-1
Y <- ar10p[,p+1]
X <- ar10p[,1:p]
# exemple train-test
train_indices <- sample(1:n,size = round(0.8*n),replace = FALSE)
X_train <- X[train_indices,]
X_test <- X[-train_indices,]
Y_train <- Y[train_indices]
Y_test <- Y[-train_indices]
table(Y_train)
res <- feature.selection(X_train,Y_train,50)
# tableau figure 3 de l'article
rm(list=ls())
set.seed(123)
library(calibrateBinary)
library(GSelection)
source("../red_score.R")
ar10p <- read.csv("ar10p.csv")
dim <- dim(ar10p)
n <- dim[1]
p <- dim[2]-1
Y <- ar10p[,p+1]
X <- ar10p[,1:p]
# exemple train-test
train_indices <- sample(1:n,size = round(0.8*n),replace = FALSE)
X_train <- X[train_indices,]
X_test <- X[-train_indices,]
Y_train <- Y[train_indices]
Y_test <- Y[-train_indices]
table(Y_train)
#res <- feature.selection(X_train,Y_train,50)
#res$hsic_selected_feature_index
rep <- 10
m_range <- seq(10,50,10)
m_taille <- length(m_range)
ClassifAcc_table <- matrix(0, nrow = m_taille,ncol = rep)
RED_table <- matrix(0,nrow = 1,ncol=rep)
for(m_index in seq_along(m_range)){
m_val <- m_range[m_index]
print(m_val)
for(i in 1:rep){
train_indices <- sample(1:n,size = round(0.8*n),replace = FALSE)
X_train <- X[train_indices,]
X_test <- X[-train_indices,]
Y_train <- Y[train_indices]
Y_test <- Y[-train_indices]
# on applique une méthode de selection de variable pour selectionner m_val features
#res <- feature.selection(X_train,Y_train,m_val)
#features_index <- res$hsic_selected_feature_index
#----------------------------------------------------
# TABLE 3 -- MClassifAccurcay
#----------------------------------------------------
# on ajuste une KLR avec X_train et Y_train
# cross validation
# ajustement du modèle
# on applique la prédiction de X_test avec le modèle entrainé
prediction <- modeledKLR_fitted(X_test)
# on regarde le taux de bien classé
ClassifAcc_table[,i] <- sum(Y_test == prediction)/length(Y_test)
#----------------------------------------------------
# TABLE 4 -- RED Score
#----------------------------------------------------
RED_table[,i] <- res_score(features_index, m_val, X_train)
}
}
# tableau figure 3 de l'article
rm(list=ls())
set.seed(123)
library(calibrateBinary)
library(GSelection)
source("../red_score.R")
ar10p <- read.csv("ar10p.csv")
dim <- dim(ar10p)
n <- dim[1]
p <- dim[2]-1
Y <- ar10p[,p+1]
X <- ar10p[,1:p]
# exemple train-test
train_indices <- sample(1:n,size = round(0.8*n),replace = FALSE)
X_train <- X[train_indices,]
X_test <- X[-train_indices,]
Y_train <- Y[train_indices]
Y_test <- Y[-train_indices]
table(Y_train)
#res <- feature.selection(X_train,Y_train,50)
#res$hsic_selected_feature_index
rep <- 10
m_range <- seq(10,50,10)
m_taille <- length(m_range)
ClassifAcc_table <- matrix(0, nrow = m_taille,ncol = rep)
RED_table <- matrix(0,nrow = 1,ncol=rep)
for(m_index in seq_along(m_range)){
m_val <- m_range[m_index]
print(m_val)
for(i in 1:rep){
train_indices <- sample(1:n,size = round(0.8*n),replace = FALSE)
X_train <- X[train_indices,]
X_test <- X[-train_indices,]
Y_train <- Y[train_indices]
Y_test <- Y[-train_indices]
# on applique une méthode de selection de variable pour selectionner m_val features
#res <- feature.selection(X_train,Y_train,m_val)
#features_index <- res$hsic_selected_feature_index
#----------------------------------------------------
# TABLE 3 -- MClassifAccurcay
#----------------------------------------------------
# on ajuste une KLR avec X_train et Y_train
# cross validation
# ajustement du modèle
# on applique la prédiction de X_test avec le modèle entrainé
#prediction <- modeledKLR_fitted(X_test)
# on regarde le taux de bien classé
#ClassifAcc_table[,i] <- sum(Y_test == prediction)/length(Y_test)
#----------------------------------------------------
# TABLE 4 -- RED Score
#----------------------------------------------------
#RED_table[,i] <- res_score(features_index, m_val, X_train)
}
}
MeanClassifAcc_table <- rowMeans(ClassifAcc_table)
MeanRED_table <- rowMeans(RED_table)
ClassifAcc_table <- matrix(0, nrow = m_taille,ncol = rep)
RED_table <- matrix(0,nrow = 1,ncol=rep)
ClassifAcc_table
RED_table
MeanClassifAcc_table <- rowMeans(ClassifAcc_table)
MeanRED_table <- rowMeans(RED_table)
MeanClassifAcc_table
plot(m_range,MeanClassifAcc_table)
plot(m_range,MeanClassifAcc_table,type="l")
