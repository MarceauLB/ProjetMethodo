do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
y_pred_val <- predict(res_samQL,X_val)$values
print(y_pred_val)
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
rep <- 30
prc_selected_features <- function(n,p,d){
list_pourcentage <- numeric(rep)
for(i in 1:rep){
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
spam_index <- order(res_spam$func_norm,decreasing = TRUE)[1:4]
val_com <- intersect(spam_index,c(1:d))
list_pourcentage[i] <- (length(val_com)/d)*100
}
return((list_pourcentage))
}
selected_spam_1 <- matrix(nrow = 10,ncol = rep)
for(sample_size in 1:10){
print(sample_size*25)
selected_spam_1[sample_size,] <- prc_selected_features(sample_size*25, 256,4)
}
rm(list=ls())
library(SAM)
set.seed(1234)
do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
y_pred_val <- predict(res_samQL,X_val)$values
print("y_pred_val")
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
rep <- 30
prc_selected_features <- function(n,p,d){
list_pourcentage <- numeric(rep)
for(i in 1:rep){
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
spam_index <- order(res_spam$func_norm,decreasing = TRUE)[1:4]
val_com <- intersect(spam_index,c(1:d))
list_pourcentage[i] <- (length(val_com)/d)*100
}
return((list_pourcentage))
}
selected_spam_1 <- matrix(nrow = 10,ncol = rep)
for(sample_size in 1:10){
print(sample_size*25)
selected_spam_1[sample_size,] <- prc_selected_features(sample_size*25, 256,4)
}
rm(list=ls())
library(SAM)
set.seed(1234)
do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
print("y_pred_val")
y_pred_val <- predict(res_samQL,X_val)$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
rep <- 30
prc_selected_features <- function(n,p,d){
list_pourcentage <- numeric(rep)
for(i in 1:rep){
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
spam_index <- order(res_spam$func_norm,decreasing = TRUE)[1:4]
val_com <- intersect(spam_index,c(1:d))
list_pourcentage[i] <- (length(val_com)/d)*100
}
return((list_pourcentage))
}
selected_spam_1 <- matrix(nrow = 10,ncol = rep)
for(sample_size in 1:10){
print(sample_size*25)
selected_spam_1[sample_size,] <- prc_selected_features(sample_size*25, 256,4)
}
rm(list=ls())
library(SAM)
set.seed(1234)
do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
print("y_pred_val")
prediction <- predict(res_samQL,X_val)
print(prediction)
#y_pred_val
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
rep <- 30
prc_selected_features <- function(n,p,d){
list_pourcentage <- numeric(rep)
for(i in 1:rep){
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
spam_index <- order(res_spam$func_norm,decreasing = TRUE)[1:4]
val_com <- intersect(spam_index,c(1:d))
list_pourcentage[i] <- (length(val_com)/d)*100
}
return((list_pourcentage))
}
selected_spam_1 <- matrix(nrow = 10,ncol = rep)
for(sample_size in 1:10){
print(sample_size*25)
selected_spam_1[sample_size,] <- prc_selected_features(sample_size*25, 256,4)
}
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
n <- 100
p <- 10
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
K_fold = 5
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
lambda_seq
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
res_samQL
grid_lamb <- res_samQL$lambda
grid_lamb
print("y_pred_val")
prediction <- predict(res_samQL,X_val)
prediction
print(prediction)
n <- 25
p <- 100
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
K_fold = 5
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
print("y_pred_val")
prediction <- predict(res_samQL,X_val)
pred_val <- prediction$values
#y_pred_val
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
pred_val <- prediction$values
#y_pred_val
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
prediction <- predict(res_samQL,X_val)
p <- 101
n <- 25
p <- 101
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
K_fold = 5
n <- 100
p <- 100
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
K_fold = 5
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
pred_val <- prediction$values
#y_pred_val
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt
lambda_opt <- mean(lambda_seq)
lambda_opt
n <- 80
p <- 100
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
K_fold = 5
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
lambda_opt
p <- 200
n <- 80
p <- 200
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
K_fold = 5
do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
n <- 50
p <- 250
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(lambda_seq)
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
print(lambda_seq)
}
lambda_seq
lambda_seq <- numeric(K_fold)
lambda_seq
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
print(lambda_seq)
}
lambda_seq
X <- as.matrix(data)
do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
print(k)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train, ]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- order(colMeans((y_pred_val - Y_val)**2),decreasing = FALSE)[1]
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
rep <- 30
prc_selected_features <- function(n,p,d){
list_pourcentage <- numeric(rep)
for(i in 1:rep){
data <- as.data.frame(matrix(rnorm(n * p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- -2*sin(2*data$X_1) + (data$X_2)**2 + data$X_3 + exp(-data$X_4) + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
spam_index <- order(res_spam$func_norm,decreasing = TRUE)[1:4]
val_com <- intersect(spam_index,c(1:d))
list_pourcentage[i] <- (length(val_com)/d)*100
}
return((list_pourcentage))
}
selected_spam_1 <- matrix(nrow = 10,ncol = rep)
for(sample_size in 1:10){
print(sample_size*25)
selected_spam_1[sample_size,] <- prc_selected_features(sample_size*25, 256,4)
}
selected_spam_1
selected_spam_1 <- matrix(0,nrow = 10,ncol = rep)
selected_spam_1
prc_selected_features(200, 256,4)
prc_selected_features(50, 256,4)
rowMeans(prc_selected_features(sample_size*25, 256,4))
rowMeans(c(100  75  75 100 100  75 100  75  75 100 100  25 100  50  75 100 100 100 100 100 100 100 100 100  75  25  75 100  75 100))
prc_selected_features(25, 256,4)
