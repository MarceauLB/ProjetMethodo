data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
p <- 500
n <- 200
p <- 500
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train,]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- which.min(colMeans((y_pred_val - Y_val)**2))
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
n <- 200
p <- 500
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
rm(list=ls())
library(SAM)
set.seed(1234)
do_cv <- function(X,Y,K_fold=5){
nX <- dim(X)[1]
pX <- dim(X)[2]
lambda_seq <- numeric(K_fold)
for(k in 1:K_fold){
X_indice_train <- sample(c(1:nX),size = round(0.8*nX),replace = FALSE)
X_train <- X[X_indice_train,]
Y_train <- Y[X_indice_train]
X_val <- X[-X_indice_train,]
Y_val <- Y[-X_indice_train]
res_samQL <- samQL(X_train, Y_train)
grid_lamb <- res_samQL$lambda
prediction <- predict(res_samQL,X_val)
y_pred_val <- prediction$values
best_lambda_index <- which.min(colMeans((y_pred_val - Y_val)**2))
lambda_seq[k] <- grid_lamb[best_lambda_index]
}
lambda_opt <- mean(lambda_seq)
return(lambda_opt)
}
n <- 200
p <- 500
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
lambda_opt
res_spam <- samQL(X,Y,lambda = lambda_opt)
res_spam
res_spam$func_norm
which(res_spam$func_norm>0)
index_positif_features
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
res_spam$func_norm
order(res_spam$func_norm)
order(res_spam$func_norm)[1:4]
order(res_spam$func_norm)[1:3]
order(res_spam$func_norm,decreasing = FALSE)[1:3]
order(res_spam$func_norm,decreasing = TRUE)[1:3]
n <- 4000
p <- 100
n <- 400
p <- 100
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
X
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
order(res_spam$func_norm,decreasing = TRUE)[1:3]
res_spam$func_norm
p <- 50
n <- 400
p <- 50
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
lambda_opt
res_spam
n <- 1000
p <- 50
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
res_spam$func_norm
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
order(res_spam$func_norm,decreasing = TRUE)[1:3]
sorted_indices <- order(res_spam$func_norm[index_positif_features], decreasing = TRUE)
sorted_indices
res_spam$func_norm
order(res_spam$func_norm,decreasing = TRUE)[1:3]
sorted_indices <- order(res_spam$func_norm[index_positif_features], decreasing = TRUE)
sorted_indices
top_indices <- sorted_indices[1:min(d, length(index_positif_features))]
top_indices <- sorted_indices[1:min(3, length(index_positif_features))]
top_indices
spam_index <- index_positif_features[top_indices]
spam_index
n <- 100000
p <- 50
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
res_spam$func_norm
order(res_spam$func_norm,decreasing = TRUE)[1:3]
sorted_indices <- order(res_spam$func_norm[index_positif_features], decreasing = TRUE)
top_indices <- sorted_indices[1:min(3, length(index_positif_features))]
spam_index <- index_positif_features[top_indices]
spam_index
val_com <- intersect(spam_index, c(1:d))
val_com <- intersect(spam_index, c(1:3))
val_com
(length(val_com) / 3) * 100
(length(val_com) / 3)
n <- 100
p <- 5000
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
index_positif_features <- which(res_spam$func_norm>0)
order(res_spam$func_norm,decreasing = TRUE)[1:3]
sorted_indices <- order(res_spam$func_norm[index_positif_features], decreasing = TRUE)
top_indices <- sorted_indices[1:min(3, length(index_positif_features))]
spam_index <- index_positif_features[top_indices]
val_com <- intersect(spam_index, c(1:3))
(length(val_com) / 3)
index_positif_features
p <- 1000
n <- 100
p <- 1000
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
index_positif_features <- which(res_spam$func_norm>0)
order(res_spam$func_norm,decreasing = TRUE)[1:3]
sorted_indices <- order(res_spam$func_norm[index_positif_features], decreasing = TRUE)
top_indices <- sorted_indices[1:min(3, length(index_positif_features))]
spam_index <- index_positif_features[top_indices]
val_com <- intersect(spam_index, c(1:3))
(length(val_com) / 3)
n <- 250
p <- 1000
data <- as.data.frame(matrix(rnorm(n*p, mean = 0, sd = 1), nrow = n, ncol = p))
colnames(data) <- paste0("X_", 1:p)
epsilon <- rnorm(n,0,1)
Y <- data$X_1*exp(2*data$X_2) + data$X_3**2 + epsilon
X <- as.matrix(data)
lambda_opt <- do_cv(X,Y,K_fold=5)
res_spam <- samQL(X,Y,lambda = lambda_opt)
res_spam
lambda_opt
index_positif_features
print(res_spam)
samQL(X,Y)
res <- samQL(X,Y)
print(res)
print(res$func_norm)
plot(res$func_norm)
plot(res)
lambda_opt
res_spam <- samQL(X,Y,lambda = 0.5)
index_positif_features <- which(res_spam$func_norm>0)
index_positif_features
res_spam$func_norm
