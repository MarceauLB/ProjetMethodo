labels = expression(0, 1, 10^1, 10^2),
srt = 0,  # Rotate labels by 0 degrees
pos = 2,   # Position to the left of the axis
xpd = TRUE,  # Allow text outside plot region
adj = 1)  # Adjust alignment for rotated labels
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y")
data <- read.csv("hsic_time_samples.csv")
features <- seq(100,1000,100)
features <- seq(100,1000,100)
moyenne_lignes <- rowMeans(store_results_data)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
yaxt = "n")  # Suppresses default y-axis labels
# Customize y-axis with no labels, only ticks
axis(2, at = c(0,1,10, 100), labels = FALSE)  # Suppresses default labels but adds ticks
# Add rotated y-axis labels using text() with 45 degrees rotation
text(x = rep(par("usr")[1], 4), y = c(0,1,10, 100),
labels = expression(0, 1, 10^1, 10^2),
srt = 0,  # Rotate labels by 0 degrees
pos = 2,   # Position to the left of the axis
xpd = TRUE,  # Allow text outside plot region
adj = 1)  # Adjust alignment for rotated labels
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y")
# Customize y-axis with no labels, only ticks
axis(2, at = c(0,1,10, 100), labels = FALSE)  # Suppresses default labels but adds ticks
# Add rotated y-axis labels using text() with 45 degrees rotation
text(x = rep(par("usr")[1], 4), y = c(0,1,10, 100),
labels = expression(0, 1, 10^1, 10^2),
srt = 0,  # Rotate labels by 0 degrees
pos = 2,   # Position to the left of the axis
xpd = TRUE,  # Allow text outside plot region
adj = 1)  # Adjust alignment for rotated labels
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y")
legend("topleft", legend = c("HSIC Lasso","SpAM", "QPFS"),
lty = c(1, 2,3), lwd = 1,cex=0.8)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y")
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y",
col="black")
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y",
col="black")
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="red")
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="black")
legend("topleft", legend = c("HSIC Lasso","SpAM", "QPFS"), lwd = 1,cex=0.8)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"), lwd = 1,cex=0.8)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="black")
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"), lwd = 1,cex=0.8)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lyt = c(2,1,3),
lwd = 1,cex=0.8)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lyt = c(2),
lwd = 1,cex=0.8)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="black", lyt=2)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lyt = c(2),
lwd = 1,cex=0.8)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="black", lyt=1)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="black", lyt=1)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="black", lty=1)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lyt = c(1,2,1),
lwd = 1,cex=0.8)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lyt = c(1),
lwd = 1,cex=0.8)
plot(features, moyenne_lignes, type = "l",
xlab = "Numbers of features",
ylab = "Seconds",
main = "Computation time of different models depending on the number of selected variables",
ylim = c(1, 10^2 +10),
log="y",
col="black", lty=1)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lyt = 1,
lwd = 1,cex=0.8)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lty = 1,
lwd = 1,cex=0.8)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lty = c(1,2,1),
lwd = 1,cex=0.8)
legend("topleft",
legend = c("HSIC Lasso","SpAM", "QPFS"),
col = c("black", "green", "red"),
lty = c(1,2,2),
lwd = 1,cex=0.8)
rm(list=ls())
data <- read.csv("hsic_time_samples.csv")
features <- seq(100,1000,100)
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y")
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y",
col="blue")
lines(features, data$V2, lty = 2, lwd = 1, col="red")
lines(features, data$V1, lty = 1, lwd = 1,col="black")
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1, 2,3), lwd = 1,cex=0.8,
col=("blue","red","black"))
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1, 2,3), lwd = 1,cex=0.8,
col=("blue","red","black"))
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1, 2,3), lwd = 1,cex=0.8,
col=c("blue","red","black"))
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1,2,3), lwd = 1,cex=0.8,
col=c("blue","red","black"))
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1,2,3), lwd = 1,cex=0.8,
col=c("blue","red","black"))
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y",
col="blue")
lines(features, data$V2, lty = 2, lwd = 1, col="red")
lines(features, data$V1, lty = 1, lwd = 1,col="black")
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(3,2,1), lwd = 1,cex=0.8,
col=c("blue","red","black"))
legend("topleft", legend = c("d=3000", "d=2000", "d=1000"),
lty = c(3,2,1), lwd = 1,cex=0.8,
col=c("blue","red","black"))
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y",
col="blue")
lines(features, data$V2, lty = 2, lwd = 1, col="red")
lines(features, data$V1, lty = 1, lwd = 1,col="black")
legend("topleft", legend = c("d=3000", "d=2000", "d=1000"),
lty = c(3,2,1), lwd = 1,cex=0.8,
col=c("blue","red","black"))
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1,2,3), lwd = 1,cex=0.8,
col=c("black","red","blue"))
plot(features, data$V3, type = "l", lty = 3, lwd = 1,
xlab = "Numbers of samples",
ylab = "Seconds",
main = "Computation time depending on sample size for differents features size for HSIC Lasso",
log="y",
col="blue")
lines(features, data$V2, lty = 2, lwd = 1, col="red")
lines(features, data$V1, lty = 1, lwd = 1,col="black")
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1,2,3), lwd = 1,cex=0.8,
col=c("black","red","blue"))
legend("topleft", legend = c("d=1000", "d=2000", "d=3000"),
lty = c(1,2,3), lwd = 1,cex=1,
col=c("black","red","blue"))
setwd("~/00_Ensai/projet-methodo/ProjetMethodo/r-code/real_word_exp/ar10p")
setwd("~/00_Ensai/projet-methodo/ProjetMethodo/r-code/real_word_exp/ar10p")
rm(list=ls())
library(GSelection)
ar10p <- read.csv("ar10p.csv")
ar10p
View(ar10p)
ar10p$X2000
ar10p
colnames(ar10p)
View(ar10p)
tail(colnames(df), 10)
tail(colnames(ar10p), 10)
Y <- ar10p$y
Y
install.packages("R.matlab")
library(R.matlab)
library(R.matlab)
setwd("~/00_Ensai/projet-methodo/ProjetMethodo/r-code/real_word_exp/dataset/")
rm(list=ls())
library(GSelection)
library(R.matlab)
library(R.matlab)
ar10p <- read.csv("ar10p.csv")
tail(colnames(ar10p), 10)
Y <- ar10p$y
data <- readMat("warpAR10P.mat")
View(data)
data$X
View(data)
data[[X]]
str(data)
df <- data.frame(X = I(data$X), Y = data$Y)
View(df)
View(df)
df$X
View(df)
df$X[,1]
ar10p$X1
df$X[,1]==ar10p$X1
df$X[,2]==ar10p$X2
View(df)
View(data)
data
str(data)
X_df <- as.data.frame(data$X)
colnames(X_df) <- paste0("Feature_", 1:2400)
# Add Y as a new column in the dataframe
X_df$Label <- data$Y
X_df
View(X_df)
colnames(X_df) <- seq(1:2400)
1:2400
seq(1:2400)
colnames(X_df) <- c(1:2400)
X_df <- as.data.frame(data$X)
colnames(X_df) <- c(1:2400)
# Add Y as a new column in the dataframe
X_df$Label <- data$Y
X_df
View(X_df)
View(X_df)
View(ar10p)
colnames(X_df) <- paste0("X", 1:2400)
X_df
X_df <- as.data.frame(data$X)
colnames(X_df) <- paste0("X", 1:2400)
# Add Y as a new column in the dataframe
X_df$Label <- data$Y
X_df
colnames(X_df)
X_df==ar10p
X_df==ar10p
X_df[X_df!=ar10p,]
all.equal(X_df, ar10p)
ar10p
X_df
# Add Y as a new column in the dataframe
X_df$y <- data$Y
X_df[X_df!=ar10p,]
all.equal(X_df, ar10p)
df$X[,2]==ar10p$X2
X_df <- as.data.frame(data$X)
colnames(X_df) <- paste0("X", 1:2400)
# Add Y as a new column in the dataframe
X_df$y <- data$Y
X_df[X_df!=ar10p,]
all.equal(X_df, ar10p)
dif <- X_df != ar10p
dif
View(dif)
all(!diff)
rm(list=ls())
ar10p <- read.csv("ar10p.csv")
tail(colnames(ar10p), 10)
Y <- ar10p$y
data <- readMat("warpAR10P.mat")
str(data)
df <- data.frame(X = I(data$X), Y = data$Y)
data <- readMat("warpAR10P.mat")
str(data)
df <- data.frame(X = I(data$X), Y = data$Y)
X_df <- as.data.frame(data$X)
colnames(X_df) <- paste0("X", 1:2400)
# Add Y as a new column in the dataframe
X_df$y <- data$Y
View(X_df)
View(ar10p)
View(X_df)
write.csv(X_df,"ar10p.csv",row.names = FALSE)
write.csv(X_df,"ar10p1.csv",row.names = FALSE)
data <- readMat("warpPIE10P.mat")
str(data)
df <- data.frame(X = I(data$X), Y = data$Y)
X_df <- as.data.frame(data$X)
colnames(X_df) <- paste0("X", 1:2400)
rm(list=ls())
library(GSelection)
library(R.matlab)
data <- readMat("warpPIE10P.mat")
str(data)
df <- data.frame(X = I(data$X), Y = data$Y)
View(df)
colnames(X_df) <- paste0("X", 1:2420)
View(df)
df <- data.frame(X = I(data$X), Y = data$Y)
data <- readMat("warpPIE10P.mat")
str(data)
df <- data.frame(X = I(data$X), Y = data$Y)
X_df <- as.data.frame(data$X)
colnames(X_df) <- paste0("X", 1:2420)
# Add Y as a new column in the dataframe
X_df$y <- data$Y
View(X_df)
# Add Y as a new column in the dataframe
X_df$y <- data$Y
data <- readMat("warpPIE10P.mat")
str(data)
X_df <- as.data.frame(data$X)
rm(list=ls())
library(GSelection)
function (x, df1, df2, ncp, log = FALSE)
library(R.matlab)
data <- readMat("warpPIE10P.mat")
str(data)
X_df <- as.data.frame(data$X)
View(X_df)
X_df$y <- data$Y
data <- readMat("warpPIE10P.mat")
str(data)
pie10p <- as.data.frame(data$X)
colnames(pie10p) <- paste0("X", 1:2420)
pie10p$y <- data$Y
write.csv(pie10p,"pie10p.csv",row.names = FALSE)
View(pie10p)
data$Y
pie10p$y <- as.vector(data$Y)
View(pie10p)
pie10p$y <- as.vector(data$Y)
write.csv(pie10p,"pie10p.csv",row.names = FALSE)
data <- readMat("pixraw10P.mat")
str(data)
pie10p <- as.data.frame(data$X)
colnames(pie10p) <- paste0("X", 1:10000)
pie10p$y <- as.vector(data$Y)
pix10p <- as.data.frame(data$X)
pix10p <- as.data.frame(data$X)
colnames(pie10p) <- paste0("X", 1:10000)
rm(list=ls())
data <- readMat("pixraw10P.mat")
str(data)
pix10p <- as.data.frame(data$X)
colnames(pix10p) <- paste0("X", 1:10000)
pix10p$y <- as.vector(data$Y)
write.csv(pix10p,"pix10p.csv",row.names = FALSE)
rm(list=ls())
rm(list=ls())
data <- readMat("warpAR10P.mat")
str(data)
ar10p <- as.data.frame(data$X)
colnames(ar10p) <- paste0("X", 1:2420)
ar10p$y <- as.vector(data$Y)
write.csv(ar10p,"to_csv/ar10p.csv",row.names = FALSE)
rm(list=ls())
data <- readMat("warpPIE10P.mat")
str(data)
pie10p <- as.data.frame(data$X)
colnames(pie10p) <- paste0("X", 1:2420)
rm(list=ls())
data <- readMat("warpAR10P.mat")
str(data)
colnames(ar10p) <- paste0("X", 1:2400)
str(data)
ar10p <- as.data.frame(data$X)
colnames(ar10p) <- paste0("X", 1:2400)
ar10p$y <- as.vector(data$Y)
write.csv(ar10p,"to_csv/ar10p.csv",row.names = FALSE)
rm(list=ls())
data <- readMat("warpPIE10P.mat")
str(data)
pie10p <- as.data.frame(data$X)
colnames(pie10p) <- paste0("X", 1:2420)
pie10p$y <- as.vector(data$Y)
write.csv(pie10p,"to_csv/pie10p.csv",row.names = FALSE)
rm(list=ls())
data <- readMat("pixraw10P.mat")
str(data)
pix10p <- as.data.frame(data$X)
colnames(pix10p) <- paste0("X", 1:10000)
pix10p$y <- as.vector(data$Y)
write.csv(pix10p,"to_csv/pix10p.csv",row.names = FALSE)
rm(list=ls())
data <- readMat("orlraws10P.mat")
str(data)
orl10p <- as.data.frame(data$X)
rm(list=ls())
data <- readMat("orlraws10P.mat")
str(data)
orl10p <- as.data.frame(data$X)
colnames(orl10p) <- paste0("X", 1:10304)
orl10p$y <- as.vector(data$Y)
write.csv(orl10p,"to_csv/orl10p.csv",row.names = FALSE)
View(orl10p)
rm(list=ls())
rm(list=ls())
data <- readMat("TOX-171.mat")
str(data)
tox <- as.data.frame(data$X)
colnames(tox) <- paste0("X", 1:5748)
tox$y <- as.vector(data$Y)
View(tox)
data <- readMat("TOX-171.mat")
str(data)
tox <- as.data.frame(data$X)
colnames(tox) <- paste0("X", 1:5748)
tox$y <- as.vector(data$Y)
write.csv(tox,"to_csv/tox.csv",row.names = FALSE)
rm(list=ls())
data <- readMat("TOX-171.mat")
data <- readMat("CLL-SUB-111.mat")
str(data)
View(data)
str(data)
tox <- as.data.frame(data$X)
colnames(tox) <- paste0("X", 1:5748)
colnames(tox) <- paste0("X", 1:11340)
tox$y <- as.vector(data$Y)
data <- readMat("CLL-SUB-111.mat")
str(data)
cll_sub <- as.data.frame(data$X)
colnames(cll_sub) <- paste0("X", 1:11340)
cll_sub$y <- as.vector(data$Y)
rm(list=ls())
data <- readMat("CLL-SUB-111.mat")
str(data)
cll_sub <- as.data.frame(data$X)
colnames(cll_sub) <- paste0("X", 1:11340)
cll_sub$y <- as.vector(data$Y)
View(cll_sub)
write.csv(cll_sub,"to_csv/cll_sub.csv",row.names = FALSE)
